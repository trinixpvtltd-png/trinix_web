{"ast":null,"code":"// Simple API client to centralize base path, JSON handling, and auth header\nexport async function apiRequest(path, {\n  method = 'GET',\n  headers = {},\n  body,\n  auth = false\n} = {}) {\n  const opts = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n      ...headers\n    }\n  };\n  if (body !== undefined) {\n    opts.body = typeof body === 'string' ? body : JSON.stringify(body);\n  }\n  if (auth) {\n    const token = localStorage.getItem('token');\n    if (token) {\n      opts.headers.Authorization = `Bearer ${token}`;\n    }\n  }\n\n  // CRA proxy forwards /api/* to backend (see package.json proxy)\n  let res;\n  try {\n    res = await fetch(`/api${path}`, opts);\n  } catch (networkErr) {\n    const error = new Error('Cannot reach backend API. Make sure the server is running on http://localhost:5000');\n    error.code = 'NETWORK';\n    error.cause = networkErr;\n    throw error;\n  }\n  const text = await res.text();\n  let data;\n  try {\n    data = text ? JSON.parse(text) : {};\n  } catch {\n    data = {\n      raw: text\n    };\n  }\n  if (!res.ok) {\n    var _data, _data2;\n    const message = ((_data = data) === null || _data === void 0 ? void 0 : _data.message) || ((_data2 = data) === null || _data2 === void 0 ? void 0 : _data2.error) || res.statusText || 'Request failed';\n    const error = new Error(message);\n    error.status = res.status;\n    error.data = data;\n    throw error;\n  }\n  return data;\n}\nexport function setAuth(token, user) {\n  if (token) localStorage.setItem('token', token);\n  if (user) localStorage.setItem('user', JSON.stringify(user));\n}\nexport function clearAuth() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n}","map":{"version":3,"names":["apiRequest","path","method","headers","body","auth","opts","undefined","JSON","stringify","token","localStorage","getItem","Authorization","res","fetch","networkErr","error","Error","code","cause","text","data","parse","raw","ok","_data","_data2","message","statusText","status","setAuth","user","setItem","clearAuth","removeItem"],"sources":["C:/Users/User/Desktop/New folder/trinix_web/frontend/src/api/client.js"],"sourcesContent":["// Simple API client to centralize base path, JSON handling, and auth header\r\nexport async function apiRequest(path, { method = 'GET', headers = {}, body, auth = false } = {}) {\r\n  const opts = {\r\n    method,\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...headers,\r\n    },\r\n  };\r\n\r\n  if (body !== undefined) {\r\n    opts.body = typeof body === 'string' ? body : JSON.stringify(body);\r\n  }\r\n\r\n  if (auth) {\r\n    const token = localStorage.getItem('token');\r\n    if (token) {\r\n      opts.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n  }\r\n\r\n  // CRA proxy forwards /api/* to backend (see package.json proxy)\r\n  let res;\r\n  try {\r\n    res = await fetch(`/api${path}`, opts);\r\n  } catch (networkErr) {\r\n    const error = new Error('Cannot reach backend API. Make sure the server is running on http://localhost:5000');\r\n    error.code = 'NETWORK';\r\n    error.cause = networkErr;\r\n    throw error;\r\n  }\r\n\r\n  const text = await res.text();\r\n  let data;\r\n  try {\r\n    data = text ? JSON.parse(text) : {};\r\n  } catch {\r\n    data = { raw: text };\r\n  }\r\n\r\n  if (!res.ok) {\r\n    const message = data?.message || data?.error || res.statusText || 'Request failed';\r\n    const error = new Error(message);\r\n    error.status = res.status;\r\n    error.data = data;\r\n    throw error;\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nexport function setAuth(token, user) {\r\n  if (token) localStorage.setItem('token', token);\r\n  if (user) localStorage.setItem('user', JSON.stringify(user));\r\n}\r\n\r\nexport function clearAuth() {\r\n  localStorage.removeItem('token');\r\n  localStorage.removeItem('user');\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,UAAUA,CAACC,IAAI,EAAE;EAAEC,MAAM,GAAG,KAAK;EAAEC,OAAO,GAAG,CAAC,CAAC;EAAEC,IAAI;EAAEC,IAAI,GAAG;AAAM,CAAC,GAAG,CAAC,CAAC,EAAE;EAChG,MAAMC,IAAI,GAAG;IACXJ,MAAM;IACNC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGA;IACL;EACF,CAAC;EAED,IAAIC,IAAI,KAAKG,SAAS,EAAE;IACtBD,IAAI,CAACF,IAAI,GAAG,OAAOA,IAAI,KAAK,QAAQ,GAAGA,IAAI,GAAGI,IAAI,CAACC,SAAS,CAACL,IAAI,CAAC;EACpE;EAEA,IAAIC,IAAI,EAAE;IACR,MAAMK,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,IAAIF,KAAK,EAAE;MACTJ,IAAI,CAACH,OAAO,CAACU,aAAa,GAAG,UAAUH,KAAK,EAAE;IAChD;EACF;;EAEA;EACA,IAAII,GAAG;EACP,IAAI;IACFA,GAAG,GAAG,MAAMC,KAAK,CAAC,OAAOd,IAAI,EAAE,EAAEK,IAAI,CAAC;EACxC,CAAC,CAAC,OAAOU,UAAU,EAAE;IACnB,MAAMC,KAAK,GAAG,IAAIC,KAAK,CAAC,oFAAoF,CAAC;IAC7GD,KAAK,CAACE,IAAI,GAAG,SAAS;IACtBF,KAAK,CAACG,KAAK,GAAGJ,UAAU;IACxB,MAAMC,KAAK;EACb;EAEA,MAAMI,IAAI,GAAG,MAAMP,GAAG,CAACO,IAAI,CAAC,CAAC;EAC7B,IAAIC,IAAI;EACR,IAAI;IACFA,IAAI,GAAGD,IAAI,GAAGb,IAAI,CAACe,KAAK,CAACF,IAAI,CAAC,GAAG,CAAC,CAAC;EACrC,CAAC,CAAC,MAAM;IACNC,IAAI,GAAG;MAAEE,GAAG,EAAEH;IAAK,CAAC;EACtB;EAEA,IAAI,CAACP,GAAG,CAACW,EAAE,EAAE;IAAA,IAAAC,KAAA,EAAAC,MAAA;IACX,MAAMC,OAAO,GAAG,EAAAF,KAAA,GAAAJ,IAAI,cAAAI,KAAA,uBAAJA,KAAA,CAAME,OAAO,OAAAD,MAAA,GAAIL,IAAI,cAAAK,MAAA,uBAAJA,MAAA,CAAMV,KAAK,KAAIH,GAAG,CAACe,UAAU,IAAI,gBAAgB;IAClF,MAAMZ,KAAK,GAAG,IAAIC,KAAK,CAACU,OAAO,CAAC;IAChCX,KAAK,CAACa,MAAM,GAAGhB,GAAG,CAACgB,MAAM;IACzBb,KAAK,CAACK,IAAI,GAAGA,IAAI;IACjB,MAAML,KAAK;EACb;EAEA,OAAOK,IAAI;AACb;AAEA,OAAO,SAASS,OAAOA,CAACrB,KAAK,EAAEsB,IAAI,EAAE;EACnC,IAAItB,KAAK,EAAEC,YAAY,CAACsB,OAAO,CAAC,OAAO,EAAEvB,KAAK,CAAC;EAC/C,IAAIsB,IAAI,EAAErB,YAAY,CAACsB,OAAO,CAAC,MAAM,EAAEzB,IAAI,CAACC,SAAS,CAACuB,IAAI,CAAC,CAAC;AAC9D;AAEA,OAAO,SAASE,SAASA,CAAA,EAAG;EAC1BvB,YAAY,CAACwB,UAAU,CAAC,OAAO,CAAC;EAChCxB,YAAY,CAACwB,UAAU,CAAC,MAAM,CAAC;AACjC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}