{"ast":null,"code":"// API service for communicating with the backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  constructor() {\n    this.baseURL = API_BASE_URL;\n  }\n\n  // Helper method to get auth headers\n  getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && {\n        Authorization: `Bearer ${token}`\n      })\n    };\n  }\n\n  // Generic request method\n  async request(endpoint, options = {}) {\n    const url = `${this.baseURL}${endpoint}`;\n    const config = {\n      headers: this.getAuthHeaders(),\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Request failed:', error);\n      throw error;\n    }\n  }\n\n  // Authentication methods\n  async register(userData) {\n    return this.request('/auth/register', {\n      method: 'POST',\n      body: JSON.stringify({\n        first_name: userData.firstName,\n        last_name: userData.lastName,\n        email: userData.email,\n        password: userData.password,\n        confirm_password: userData.confirmPassword,\n        phone: userData.phone || '',\n        company: userData.company || '',\n        role: 'user'\n      })\n    });\n  }\n  async login(credentials) {\n    return this.request('/auth/login', {\n      method: 'POST',\n      body: JSON.stringify(credentials)\n    });\n  }\n\n  // User methods\n  async getCurrentUser() {\n    return this.request('/auth/me');\n  }\n\n  // Project methods\n  async getProjects() {\n    return this.request('/projects');\n  }\n  async createProject(projectData) {\n    return this.request('/projects', {\n      method: 'POST',\n      body: JSON.stringify(projectData)\n    });\n  }\n  async updateProject(id, projectData) {\n    return this.request(`/projects/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(projectData)\n    });\n  }\n  async deleteProject(id) {\n    return this.request(`/projects/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Research methods\n  async getResearches() {\n    return this.request('/researches');\n  }\n  async createResearch(researchData) {\n    return this.request('/researches', {\n      method: 'POST',\n      body: JSON.stringify(researchData)\n    });\n  }\n  async updateResearch(id, researchData) {\n    return this.request(`/researches/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(researchData)\n    });\n  }\n  async deleteResearch(id) {\n    return this.request(`/researches/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Job methods\n  async getJobs() {\n    return this.request('/jobs');\n  }\n  async createJob(jobData) {\n    return this.request('/jobs', {\n      method: 'POST',\n      body: JSON.stringify(jobData)\n    });\n  }\n  async updateJob(id, jobData) {\n    return this.request(`/jobs/${id}`, {\n      method: 'PUT',\n      body: JSON.stringify(jobData)\n    });\n  }\n  async deleteJob(id) {\n    return this.request(`/jobs/${id}`, {\n      method: 'DELETE'\n    });\n  }\n\n  // Dashboard methods\n  async getDashboardStats() {\n    return this.request('/dashboard/stats');\n  }\n  async getUserIdeas() {\n    return this.request('/dashboard/ideas');\n  }\n  async submitIdea(ideaData) {\n    return this.request('/dashboard/ideas', {\n      method: 'POST',\n      body: JSON.stringify(ideaData)\n    });\n  }\n\n  // Chat methods\n  async sendChatMessage(message, sessionId) {\n    return this.request('/chat', {\n      method: 'POST',\n      body: JSON.stringify({\n        question: message,\n        sessionId: sessionId || `session-${Date.now()}`\n      })\n    });\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.request('/health');\n  }\n}\n\n// Create and export a singleton instance\nconst apiService = new ApiService();\nexport default apiService;","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","constructor","baseURL","getAuthHeaders","token","localStorage","getItem","Authorization","request","endpoint","options","url","config","headers","response","fetch","data","json","ok","Error","message","status","error","console","register","userData","method","body","JSON","stringify","first_name","firstName","last_name","lastName","email","password","confirm_password","confirmPassword","phone","company","role","login","credentials","getCurrentUser","getProjects","createProject","projectData","updateProject","id","deleteProject","getResearches","createResearch","researchData","updateResearch","deleteResearch","getJobs","createJob","jobData","updateJob","deleteJob","getDashboardStats","getUserIdeas","submitIdea","ideaData","sendChatMessage","sessionId","question","Date","now","healthCheck","apiService"],"sources":["C:/Users/sahod/OneDrive/Desktop/Trinix website/trinix_web/frontend/src/services/api.js"],"sourcesContent":["// API service for communicating with the backend\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\nclass ApiService {\r\n  constructor() {\r\n    this.baseURL = API_BASE_URL;\r\n  }\r\n\r\n  // Helper method to get auth headers\r\n  getAuthHeaders() {\r\n    const token = localStorage.getItem('token');\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      ...(token && { Authorization: `Bearer ${token}` })\r\n    };\r\n  }\r\n\r\n  // Generic request method\r\n  async request(endpoint, options = {}) {\r\n    const url = `${this.baseURL}${endpoint}`;\r\n    const config = {\r\n      headers: this.getAuthHeaders(),\r\n      ...options\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n      \r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Request failed:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Authentication methods\r\n  async register(userData) {\r\n    return this.request('/auth/register', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        first_name: userData.firstName,\r\n        last_name: userData.lastName,\r\n        email: userData.email,\r\n        password: userData.password,\r\n        confirm_password: userData.confirmPassword,\r\n        phone: userData.phone || '',\r\n        company: userData.company || '',\r\n        role: 'user'\r\n      })\r\n    });\r\n  }\r\n\r\n  async login(credentials) {\r\n    return this.request('/auth/login', {\r\n      method: 'POST',\r\n      body: JSON.stringify(credentials)\r\n    });\r\n  }\r\n\r\n  // User methods\r\n  async getCurrentUser() {\r\n    return this.request('/auth/me');\r\n  }\r\n\r\n  // Project methods\r\n  async getProjects() {\r\n    return this.request('/projects');\r\n  }\r\n\r\n  async createProject(projectData) {\r\n    return this.request('/projects', {\r\n      method: 'POST',\r\n      body: JSON.stringify(projectData)\r\n    });\r\n  }\r\n\r\n  async updateProject(id, projectData) {\r\n    return this.request(`/projects/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(projectData)\r\n    });\r\n  }\r\n\r\n  async deleteProject(id) {\r\n    return this.request(`/projects/${id}`, {\r\n      method: 'DELETE'\r\n    });\r\n  }\r\n\r\n  // Research methods\r\n  async getResearches() {\r\n    return this.request('/researches');\r\n  }\r\n\r\n  async createResearch(researchData) {\r\n    return this.request('/researches', {\r\n      method: 'POST',\r\n      body: JSON.stringify(researchData)\r\n    });\r\n  }\r\n\r\n  async updateResearch(id, researchData) {\r\n    return this.request(`/researches/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(researchData)\r\n    });\r\n  }\r\n\r\n  async deleteResearch(id) {\r\n    return this.request(`/researches/${id}`, {\r\n      method: 'DELETE'\r\n    });\r\n  }\r\n\r\n  // Job methods\r\n  async getJobs() {\r\n    return this.request('/jobs');\r\n  }\r\n\r\n  async createJob(jobData) {\r\n    return this.request('/jobs', {\r\n      method: 'POST',\r\n      body: JSON.stringify(jobData)\r\n    });\r\n  }\r\n\r\n  async updateJob(id, jobData) {\r\n    return this.request(`/jobs/${id}`, {\r\n      method: 'PUT',\r\n      body: JSON.stringify(jobData)\r\n    });\r\n  }\r\n\r\n  async deleteJob(id) {\r\n    return this.request(`/jobs/${id}`, {\r\n      method: 'DELETE'\r\n    });\r\n  }\r\n\r\n  // Dashboard methods\r\n  async getDashboardStats() {\r\n    return this.request('/dashboard/stats');\r\n  }\r\n\r\n  async getUserIdeas() {\r\n    return this.request('/dashboard/ideas');\r\n  }\r\n\r\n  async submitIdea(ideaData) {\r\n    return this.request('/dashboard/ideas', {\r\n      method: 'POST',\r\n      body: JSON.stringify(ideaData)\r\n    });\r\n  }\r\n\r\n  // Chat methods\r\n  async sendChatMessage(message, sessionId) {\r\n    return this.request('/chat', {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        question: message,\r\n        sessionId: sessionId || `session-${Date.now()}`\r\n      })\r\n    });\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck() {\r\n    return this.request('/health');\r\n  }\r\n}\r\n\r\n// Create and export a singleton instance\r\nconst apiService = new ApiService();\r\nexport default apiService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}