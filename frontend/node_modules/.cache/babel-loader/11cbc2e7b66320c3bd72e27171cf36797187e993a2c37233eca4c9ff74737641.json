{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\New folder\\\\trinix_web\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport apiService from '../services/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [token, setToken] = useState(localStorage.getItem('token'));\n\n  // Check if user is authenticated on app load\n  useEffect(() => {\n    const checkAuth = async () => {\n      const storedToken = localStorage.getItem('token');\n      const storedUser = localStorage.getItem('user');\n      if (storedToken && storedUser) {\n        try {\n          // Verify token is still valid by making an API call\n          await apiService.healthCheck();\n          setToken(storedToken);\n          setUser(JSON.parse(storedUser));\n        } catch (error) {\n          // Token is invalid, clear storage\n          localStorage.removeItem('token');\n          localStorage.removeItem('user');\n          setToken(null);\n          setUser(null);\n        }\n      }\n      setLoading(false);\n    };\n    checkAuth();\n  }, []);\n  const login = async credentials => {\n    try {\n      const response = await apiService.login(credentials);\n      if (response.token && response.user) {\n        const {\n          token: newToken,\n          user: userData\n        } = response;\n\n        // Store in localStorage\n        localStorage.setItem('token', newToken);\n        localStorage.setItem('user', JSON.stringify(userData));\n\n        // Update state\n        setToken(newToken);\n        setUser(userData);\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error('Invalid response from server');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message || 'Login failed. Please try again.'\n      };\n    }\n  };\n  const register = async userData => {\n    try {\n      const response = await apiService.register(userData);\n      if (response.success && response.data) {\n        const {\n          token: newToken,\n          user: newUser\n        } = response.data;\n\n        // Store in localStorage\n        localStorage.setItem('token', newToken);\n        localStorage.setItem('user', JSON.stringify(newUser));\n\n        // Update state\n        setToken(newToken);\n        setUser(newUser);\n        return {\n          success: true,\n          user: newUser\n        };\n      } else {\n        throw new Error(response.message || 'Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message || 'Registration failed. Please try again.'\n      };\n    }\n  };\n  const logout = () => {\n    // Clear localStorage\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n\n    // Clear state\n    setToken(null);\n    setUser(null);\n  };\n  const isAuthenticated = () => {\n    return !!(token && user);\n  };\n  const isAdmin = () => {\n    return user && user.role === 'admin';\n  };\n  const value = {\n    user,\n    token,\n    loading,\n    login,\n    register,\n    logout,\n    isAuthenticated,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"/pbUqy0QsBvMqKPYubk3+KKKH8I=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","apiService","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","token","setToken","localStorage","getItem","checkAuth","storedToken","storedUser","healthCheck","JSON","parse","error","removeItem","login","credentials","response","newToken","userData","setItem","stringify","success","console","message","register","data","newUser","logout","isAuthenticated","isAdmin","role","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/Desktop/New folder/trinix_web/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport apiService from '../services/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // Check if user is authenticated on app load\r\n  useEffect(() => {\r\n    const checkAuth = async () => {\r\n      const storedToken = localStorage.getItem('token');\r\n      const storedUser = localStorage.getItem('user');\r\n      \r\n      if (storedToken && storedUser) {\r\n        try {\r\n          // Verify token is still valid by making an API call\r\n          await apiService.healthCheck();\r\n          setToken(storedToken);\r\n          setUser(JSON.parse(storedUser));\r\n        } catch (error) {\r\n          // Token is invalid, clear storage\r\n          localStorage.removeItem('token');\r\n          localStorage.removeItem('user');\r\n          setToken(null);\r\n          setUser(null);\r\n        }\r\n      }\r\n      setLoading(false);\r\n    };\r\n\r\n    checkAuth();\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      const response = await apiService.login(credentials);\r\n      \r\n      if (response.token && response.user) {\r\n        const { token: newToken, user: userData } = response;\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('token', newToken);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        \r\n        // Update state\r\n        setToken(newToken);\r\n        setUser(userData);\r\n        \r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.message || 'Login failed. Please try again.' \r\n      };\r\n    }\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      const response = await apiService.register(userData);\r\n      \r\n      if (response.success && response.data) {\r\n        const { token: newToken, user: newUser } = response.data;\r\n        \r\n        // Store in localStorage\r\n        localStorage.setItem('token', newToken);\r\n        localStorage.setItem('user', JSON.stringify(newUser));\r\n        \r\n        // Update state\r\n        setToken(newToken);\r\n        setUser(newUser);\r\n        \r\n        return { success: true, user: newUser };\r\n      } else {\r\n        throw new Error(response.message || 'Registration failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { \r\n        success: false, \r\n        error: error.message || 'Registration failed. Please try again.' \r\n      };\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    // Clear localStorage\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    \r\n    // Clear state\r\n    setToken(null);\r\n    setUser(null);\r\n  };\r\n\r\n  const isAuthenticated = () => {\r\n    return !!(token && user);\r\n  };\r\n\r\n  const isAdmin = () => {\r\n    return user && user.role === 'admin';\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    token,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    isAuthenticated,\r\n    isAdmin\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}